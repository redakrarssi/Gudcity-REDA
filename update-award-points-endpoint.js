/**
 * Update Award Points Endpoint Script
 * 
 * This script updates your application to use the best working award points endpoint.
 * Run this script after you've identified the best endpoint using the verification tool.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Available endpoints
const endpoints = [
  '/api/businesses/award-points',
  '/api/direct/direct-award-points',
  '/api/businesses/award-points-direct',
  '/api/businesses/award-points-emergency',
  '/api/direct/award-points-emergency',
  '/award-points-emergency'
];

console.log('üîß Award Points Endpoint Update Tool');
console.log('');
console.log('This tool will update your application to use the best working award points endpoint.');
console.log('Make sure you have identified the best endpoint using the verification tool first.');
console.log('');
console.log('Available endpoints:');
endpoints.forEach((endpoint, index) => {
  console.log(`${index + 1}. ${endpoint}`);
});

// Ask for the best endpoint
rl.question('\nEnter the number of the best working endpoint: ', (answer) => {
  const endpointIndex = parseInt(answer) - 1;
  
  if (isNaN(endpointIndex) || endpointIndex < 0 || endpointIndex >= endpoints.length) {
    console.error('‚ùå Invalid selection. Please enter a number between 1 and ' + endpoints.length);
    rl.close();
    return;
  }
  
  const selectedEndpoint = endpoints[endpointIndex];
  console.log(`\n‚úÖ Selected endpoint: ${selectedEndpoint}`);
  
  // Create a configuration file with the selected endpoint
  const configContent = `/**
 * Award Points System Configuration
 * 
 * This file contains the configuration for the award points system.
 * It is automatically generated by the update-award-points-endpoint.js script.
 */

export const AWARD_POINTS_CONFIG = {
  endpoint: "${selectedEndpoint}",
  fallbackEndpoints: ${JSON.stringify(endpoints.filter(e => e !== selectedEndpoint))},
  updatedAt: "${new Date().toISOString()}"
};
`;

  try {
    // Create src/config directory if it doesn't exist
    const configDir = path.join(__dirname, 'src', 'config');
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
      console.log('‚úÖ Created config directory');
    }
    
    // Write configuration file
    fs.writeFileSync(path.join(configDir, 'awardPointsConfig.ts'), configContent);
    console.log('‚úÖ Created award points configuration file');
    
    // Create a client-side helper that uses the selected endpoint
    const helperContent = `/**
 * Award Points Helper
 * 
 * This file provides helper functions for awarding points using the best endpoint.
 * It is automatically generated by the update-award-points-endpoint.js script.
 */

// The best working endpoint
const BEST_ENDPOINT = "${selectedEndpoint}";

// Fallback endpoints
const FALLBACK_ENDPOINTS = ${JSON.stringify(endpoints.filter(e => e !== selectedEndpoint))};

/**
 * Award points using the best endpoint with fallback
 */
export async function awardPoints(customerId, programId, points, description = '', source = 'APP') {
  if (!customerId || !programId || !points) {
    return { success: false, error: 'Missing required parameters' };
  }
  
  const payload = {
    customerId: String(customerId),
    programId: String(programId),
    points: Number(points),
    description: description || 'Points awarded',
    source: source || 'APP'
  };
  
  // Try the best endpoint first
  try {
    const result = await makeRequest(BEST_ENDPOINT, payload);
    if (result.success) {
      return result;
    }
    
    // If best endpoint fails, try fallbacks
    for (const endpoint of FALLBACK_ENDPOINTS) {
      try {
        const fallbackResult = await makeRequest(endpoint, payload);
        if (fallbackResult.success) {
          console.warn(\`Best endpoint failed, succeeded with fallback: \${endpoint}\`);
          return fallbackResult;
        }
      } catch (e) {
        console.error(\`Fallback endpoint \${endpoint} failed: \${e.message}\`);
      }
    }
    
    return { 
      success: false, 
      error: 'All endpoints failed', 
      message: 'Failed to award points after trying all endpoints' 
    };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * Make a request to the specified endpoint
 */
async function makeRequest(endpoint, payload) {
  const token = localStorage.getItem('token');
  
  if (!token) {
    return { success: false, error: 'No authentication token found' };
  }
  
  const response = await fetch(endpoint, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': token.startsWith('Bearer ') ? token : \`Bearer \${token}\`
    },
    credentials: 'same-origin',
    body: JSON.stringify(payload)
  });
  
  if (response.ok) {
    const data = await response.json();
    return { success: true, data };
  }
  
  const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
  return { 
    success: false, 
    status: response.status,
    error: errorData.error || errorData.message || \`HTTP error \${response.status}\`
  };
}
`;

    // Create src/utils directory if it doesn't exist
    const utilsDir = path.join(__dirname, 'src', 'utils');
    if (!fs.existsSync(utilsDir)) {
      fs.mkdirSync(utilsDir, { recursive: true });
      console.log('‚úÖ Created utils directory');
    }
    
    // Write helper file
    fs.writeFileSync(path.join(utilsDir, 'awardPointsHelper.ts'), helperContent);
    console.log('‚úÖ Created award points helper file');
    
    // Create a README file with usage instructions
    const readmeContent = `# Award Points System Update

## Configuration

The award points system has been updated to use the following endpoint:

\`\`\`
${selectedEndpoint}
\`\`\`

This endpoint was selected as the most reliable based on testing with the verification tool.

## How to Use

### In TypeScript/JavaScript files

\`\`\`typescript
import { awardPoints } from '../utils/awardPointsHelper';

// Award points to a customer
const result = await awardPoints(
  customerId,  // Customer ID
  programId,   // Program ID
  points,      // Number of points
  'Points earned from purchase',  // Description (optional)
  'POS_SYSTEM'  // Source (optional)
);

if (result.success) {
  console.log('Points awarded successfully!');
} else {
  console.error('Failed to award points:', result.error);
}
\`\`\`

### In HTML files

Make sure to include the fix script:

\`\`\`html
<script src="/fix-award-points-final.js"></script>
\`\`\`

Then use the global helper function:

\`\`\`javascript
awardPointsWithFallback(
  customerId,
  programId,
  points,
  'Points earned from promo'
).then(result => {
  if (result.success) {
    console.log('Points awarded successfully!');
  } else {
    console.error('Failed to award points:', result.error);
  }
});
\`\`\`

## Verification

You can verify the award points system is working correctly using the verification tool:

http://localhost:3000/verify-award-points.html
`;

    // Write README file
    fs.writeFileSync('AWARD-POINTS-USAGE.md', readmeContent);
    console.log('‚úÖ Created usage documentation');
    
    console.log('\nüéØ Application updated successfully to use the best award points endpoint!');
    console.log('\nNext steps:');
    console.log('1. Review the AWARD-POINTS-USAGE.md file for usage instructions');
    console.log('2. Import the awardPoints function from utils/awardPointsHelper.ts in your components');
    console.log('3. Include the fix-award-points-final.js script in your HTML files');
    
  } catch (error) {
    console.error('‚ùå Error updating application:', error);
  }
  
  rl.close();
}); 